package org.example.Tree

/**
 * üß© –ó–∞–¥–∞—á–∞:
 * –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–∑–µ—Ä–∫–∞–ª—å–Ω–æ –æ—Ç—Ä–∞–∑–∏—Ç—å –µ–≥–æ).
 *
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ.
 *
 * –ü—Ä–∏–º–µ—Ä:
 *      4
 *     / \
 *    2   7
 *   / \ / \
 *  1  3 6  9
 *
 * –ü–æ—Å–ª–µ –∏–Ω–≤–µ—Ä—Å–∏–∏:
 *      4
 *     / \
 *    7   2
 *   / \ / \
 *  9  6 3  1
 */

class Solution {
    fun invertTree(root: TreeNode?): TreeNode? {
        if (root == null) return null

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ
        val left = invertTree(root.left)
        val right = invertTree(root.right)

        // –ú–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
        root.left = right
        root.right = left

        return root
    }
}

/**
 * üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 */
fun main() {
    val root = TreeNode(4)
    root.left = TreeNode(2)
    root.right = TreeNode(7)
    root.left!!.left = TreeNode(1)
    root.left!!.right = TreeNode(3)
    root.right!!.left = TreeNode(6)
    root.right!!.right = TreeNode(9)

    val inverted = Solution().invertTree(root)
    println("–î–µ—Ä–µ–≤–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ ‚úÖ")
}
