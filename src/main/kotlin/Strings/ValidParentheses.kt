package org.example.Strings

import kotlin.text.iterator

//Дана строка s, содержащая только следующие символы: '(', ')', '{', '}', '[', ']'.
//Определите, является ли входная строка валидной.
//
//Строка считается валидной, если выполняются все следующие условия:
//
//Каждая открывающая скобка должна быть закрыта скобкой того же типа.
//
//Скобки должны быть закрыты в правильном порядке.
//
//Каждая закрывающая скобка должна иметь соответствующую открывающую скобку того же типа.
//
//Примеры:
//
//Вход: s = "()"
//Выход: true
//✅ Скобки закрыты правильно.
//
//Вход: s = "()[]{}"
//Выход: true
//✅ Все типы скобок закрыты в правильном порядке.
//
//Вход: s = "(]"
//Выход: false
//❌ Круглая скобка не может быть закрыта квадратной.
//
//Вход: s = "([])"
//Выход: true
//✅ Вложенность корректная.
//
//Вход: s = "([)]"
//Выход: false
//❌ Скобки закрыты в неправильном порядке.

fun main() {
    val solution = ValidParentheses()

    val testCases = listOf(
        "()",         // true
        "()[]{}",     // true
        "(]",         // false
        "([])",       // true
        "([)]",       // false
        ""            // true
    )

    for (s in testCases) {
        println("Input: \"$s\" → Output: ${solution.isValid(s)}")
    }
}

class ValidParentheses {
    fun isValid(s: String): Boolean {
        // Используем ArrayDeque как стек (более эффективен, чем Stack)
        val stack = ArrayDeque<Char>()

        // Мапа соответствий закрывающих и открывающих скобок
        val map = mapOf(
            ')' to '(',  // ')' должен закрывать '('
            '}' to '{',  // '}' должен закрывать '{'
            ']' to '['   // ']' должен закрывать '['
        )

        // Итерируем по каждому символу строки
        for (c in s) {
            if (c in map.values) {
                // Если символ — открывающая скобка, кладём в стек
                stack.addLast(c)
            } else if (c in map.keys) {
                // Если символ — закрывающая скобка

                // Проверка: если стек пуст или верхний элемент стека не соответствует открывающей скобке — строка невалидна
                if (stack.isEmpty() || stack.removeLast() != map[c]) return false
            }
            // По условию задачи другие символы не встречаются
        }

        // После завершения прохода по строке стек должен быть пуст (все скобки закрыты)
        return stack.isEmpty()
    }
}

class ValidParentheses2 {
    fun isValid(str: String): Boolean {
        val s = CharArray((str.length + 1) / 2) // создаём стек фиксированной длины
        var ss = 0 // указатель на вершину стека

        for (ch in str) {
            when (ch) {
                '(' -> if (ss < s.size) s[ss++] = ')' else return false
                '{' -> if (ss < s.size) s[ss++] = '}' else return false
                '[' -> if (ss < s.size) s[ss++] = ']' else return false
                ')', '}', ']' -> if (ss > 0 && s[ss - 1] == ch) ss-- else return false
            }
        }

        return ss == 0
    }
}

